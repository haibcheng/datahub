# Defining environment
ARG APP_ENV=prod
ARG FIPS=nonfips

FROM registry-rmc.webex.com/mats/alma8-${FIPS}:1.4.202303 as base
ENV USER=alma

COPY ./docker/mats-libs/alma8/adoptium.repo /etc/yum.repos.d/adoptium.repo

RUN yum install -y curl wget \
    && yum install -y temurin-11-jdk

ENV JAVA_HOME=/usr/lib/jvm/temurin-11-jdk
ENV DR_VERSION v0.6.1

RUN if [ $(arch) = "aarch64" ]; then \
      DR_ARCH='aarch64';\
    elif [ $(arch) = "x86_64" ]; then \
      DR_ARCH='amd64'; \
    else \
      echo >&2 "Unsupported architecture $(arch)" ; exit 1; \
    fi \
    && curl https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-runner/9.4.48.v20220622/jetty-runner-9.4.48.v20220622.jar --output jetty-runner.jar \
    && curl https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-jmx/9.4.48.v20220622/jetty-jmx-9.4.48.v20220622.jar --output jetty-jmx.jar \
    && curl https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-util/9.4.48.v20220622/jetty-util-9.4.48.v20220622.jar --output jetty-util.jar \
    && wget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v1.4.1/opentelemetry-javaagent-all.jar \
    && wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.16.1/jmx_prometheus_javaagent-0.16.1.jar -O jmx_prometheus_javaagent.jar \
    && curl -L https://github.com/treff7es/dockerize/releases/download/$DR_VERSION/dockerize-linux-${DR_ARCH}-$DR_VERSION.tar.gz | tar -C /usr/local/bin -xzv

RUN yum remove -y wget || true

FROM base AS prod-build

COPY ./docker/mats-libs/alma8/almalinux.repo /etc/yum.repos.d/almalinux.repo

RUN yum install -y perl

ADD ./docker/mats-libs/mats-monitoring-logback /root/.m2/repository/com/cisco/webex/mats/mats-monitoring-logback
COPY . /datahub-src

RUN cd /datahub-src \
    && ./gradlew :metadata-service:restli-servlet-impl:build -Prest.model.compatibility=ignore \
    && ./gradlew :metadata-service:war:build -x test

RUN cp /datahub-src/metadata-service/war/build/libs/war.war /war.war

FROM base as prod-install

COPY --from=prod-build /war.war /datahub/datahub-gms/bin/war.war
COPY --from=prod-build /datahub-src/metadata-models/src/main/resources/entity-registry.yml /datahub/datahub-gms/resources/entity-registry.yml
COPY --from=prod-build /datahub-src/docker/mats-gms/start.sh /datahub/datahub-gms/scripts/start.sh
COPY --from=prod-build /datahub-src/docker/mats-gms/jetty.xml /datahub/datahub-gms/scripts/jetty.xml
COPY --from=prod-build /datahub-src/docker/monitoring/client-prometheus-config.yaml /datahub/datahub-gms/scripts/prometheus-config.yaml

RUN chown -R $USER:$USER /datahub
RUN chmod +x /datahub/datahub-gms/scripts/start.sh

FROM base as dev-install
# Dummy stage for development. Assumes code is built on your machine and mounted to this image.
# See this excellent thread https://github.com/docker/cli/issues/1134

FROM ${APP_ENV}-install as final

ENV LOG_DIR=/tmp/datahub/logs/gms
RUN mkdir -p $LOG_DIR && chown -R $USER:$USER /tmp/datahub

COPY docker/mats-gms/retention.yaml /etc/datahub/plugins/retention/
RUN mkdir -p /etc/datahub/plugins/auth/resources \
    && chmod -R 755 /etc/datahub

ENV JMX_OPTS=""
ENV JAVA_OPTS=""

EXPOSE 8080

HEALTHCHECK --start-period=2m --retries=4 CMD curl --fail http://localhost:8080/health || exit 1

CMD /datahub/datahub-gms/scripts/start.sh